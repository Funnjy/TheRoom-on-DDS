/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : PIM
 **/
public class PIM extends Component implements IPIM_get_sensor, IPIM_human_input {

private List<AttributeListener> attListener = new ArrayList<AttributeListener>();
public void addAttributeListener(AttributeListener listener){
this.attListener.add(listener);
}

public void removeAttributeListener(AttributeListener listener){
this.attListener.remove(listener);
}

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
@Override
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tthermometers = " + PIM_thermometers_var;
result += "\tthermotext = " + PIM_thermotext_var;
result += "\tthermoval = " + PIM_thermoval_var;
result += "\tlast_thermo = " + PIM_last_thermo_var;
result += "\tid_s = " + PIM_id_s_var;
result += "\ttemp_s = " + PIM_temp_s_var;
result += "\tfound = " + PIM_found_var;
result += "\ti = " + PIM_i_var;
result += "";
return result;
}

private Collection<IPIM_request_sensorClient> request_sensor_clients = Collections.synchronizedCollection(new LinkedList<IPIM_request_sensorClient>());
public synchronized void registerOnRequest_sensor(IPIM_request_sensorClient client){
request_sensor_clients.add(client);
}

public synchronized void unregisterFromRequest_sensor(IPIM_request_sensorClient client){
request_sensor_clients.remove(client);
}

private Collection<IPIM_request_actuatorClient> request_actuator_clients = Collections.synchronizedCollection(new LinkedList<IPIM_request_actuatorClient>());
public synchronized void registerOnRequest_actuator(IPIM_request_actuatorClient client){
request_actuator_clients.add(client);
}

public synchronized void unregisterFromRequest_actuator(IPIM_request_actuatorClient client){
request_actuator_clients.remove(client);
}

private Collection<IPIM_human_outputClient> human_output_clients = Collections.synchronizedCollection(new LinkedList<IPIM_human_outputClient>());
public synchronized void registerOnHuman_output(IPIM_human_outputClient client){
human_output_clients.add(client);
}

public synchronized void unregisterFromHuman_output(IPIM_human_outputClient client){
human_output_clients.remove(client);
}

@Override
public synchronized void temperature_via_get_sensor(short TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, float TemperatureMsg_temperature_t_var){
receive(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var), get_sensor_port);
}

@Override
public synchronized void sensorinfo_via_get_sensor(String GeneralMsg_sensorinfo_model_var, String GeneralMsg_sensorinfo_proto_var, short GeneralMsg_sensorinfo_sid_var, short GeneralMsg_sensorinfo_dataTypes_var, float GeneralMsg_sensorinfo_temperature_var, int GeneralMsg_sensorinfo_humidity_var, int GeneralMsg_sensorinfo_timeStamp_var){
receive(sensorinfoType.instantiate(GeneralMsg_sensorinfo_model_var, GeneralMsg_sensorinfo_proto_var, GeneralMsg_sensorinfo_sid_var, GeneralMsg_sensorinfo_dataTypes_var, GeneralMsg_sensorinfo_temperature_var, GeneralMsg_sensorinfo_humidity_var, GeneralMsg_sensorinfo_timeStamp_var), get_sensor_port);
}

@Override
public synchronized void deviceinfo_via_get_sensor(short GeneralMsg_deviceinfo_did_var, String GeneralMsg_deviceinfo_name_var, String GeneralMsg_deviceinfo_model_var, String GeneralMsg_deviceinfo_proto_var, String GeneralMsg_deviceinfo_ttype_var, short GeneralMsg_deviceinfo_meth_var, String GeneralMsg_deviceinfo_lastCmd_var, int GeneralMsg_deviceinfo_lastValue_var){
receive(deviceinfoType.instantiate(GeneralMsg_deviceinfo_did_var, GeneralMsg_deviceinfo_name_var, GeneralMsg_deviceinfo_model_var, GeneralMsg_deviceinfo_proto_var, GeneralMsg_deviceinfo_ttype_var, GeneralMsg_deviceinfo_meth_var, GeneralMsg_deviceinfo_lastCmd_var, GeneralMsg_deviceinfo_lastValue_var), get_sensor_port);
}

@Override
public synchronized void add_thermometer_via_human_input(short TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
receive(add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var), human_input_port);
}

@Override
public synchronized void add_device_via_human_input(short DeviceGeneral_add_device_did_var){
receive(add_deviceType.instantiate(DeviceGeneral_add_device_did_var), human_input_port);
}

@Override
public synchronized void fetch_temp_via_human_input(short TemperatureMsg_fetch_temp_id_var){
receive(fetch_tempType.instantiate(TemperatureMsg_fetch_temp_id_var), human_input_port);
}

@Override
public synchronized void fetch_all_temps_via_human_input(){
receive(fetch_all_tempsType.instantiate(), human_input_port);
}

@Override
public synchronized void SwitchOn_via_human_input(short OnOffMsg_SwitchOn_did_var){
receive(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var), human_input_port);
}

@Override
public synchronized void SwitchOff_via_human_input(short OnOffMsg_SwitchOff_did_var){
receive(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var), human_input_port);
}

private void sendAdd_thermometer_via_request_sensor(short TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
//ThingML send
request_sensor_port.send(add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var));
//send to other clients
for(IPIM_request_sensorClient client : request_sensor_clients){
client.add_thermometer_from_request_sensor(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var);
}}

private void sendAdd_device_via_request_actuator(short DeviceGeneral_add_device_did_var){
//ThingML send
request_actuator_port.send(add_deviceType.instantiate(DeviceGeneral_add_device_did_var));
//send to other clients
for(IPIM_request_actuatorClient client : request_actuator_clients){
client.add_device_from_request_actuator(DeviceGeneral_add_device_did_var);
}}

private void sendSwitchOn_via_request_actuator(short OnOffMsg_SwitchOn_did_var){
//ThingML send
request_actuator_port.send(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var));
//send to other clients
for(IPIM_request_actuatorClient client : request_actuator_clients){
client.SwitchOn_from_request_actuator(OnOffMsg_SwitchOn_did_var);
}}

private void sendSwitchOff_via_request_actuator(short OnOffMsg_SwitchOff_did_var){
//ThingML send
request_actuator_port.send(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var));
//send to other clients
for(IPIM_request_actuatorClient client : request_actuator_clients){
client.SwitchOff_from_request_actuator(OnOffMsg_SwitchOff_did_var);
}}

private void sendTemperature_via_human_output(short TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, float TemperatureMsg_temperature_t_var){
//ThingML send
human_output_port.send(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var));
//send to other clients
for(IPIM_human_outputClient client : human_output_clients){
client.temperature_from_human_output(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
}}

private void sendSensorinfo_via_human_output(String GeneralMsg_sensorinfo_model_var, String GeneralMsg_sensorinfo_proto_var, short GeneralMsg_sensorinfo_sid_var, short GeneralMsg_sensorinfo_dataTypes_var, float GeneralMsg_sensorinfo_temperature_var, int GeneralMsg_sensorinfo_humidity_var, int GeneralMsg_sensorinfo_timeStamp_var){
//ThingML send
human_output_port.send(sensorinfoType.instantiate(GeneralMsg_sensorinfo_model_var, GeneralMsg_sensorinfo_proto_var, GeneralMsg_sensorinfo_sid_var, GeneralMsg_sensorinfo_dataTypes_var, GeneralMsg_sensorinfo_temperature_var, GeneralMsg_sensorinfo_humidity_var, GeneralMsg_sensorinfo_timeStamp_var));
//send to other clients
for(IPIM_human_outputClient client : human_output_clients){
client.sensorinfo_from_human_output(GeneralMsg_sensorinfo_model_var, GeneralMsg_sensorinfo_proto_var, GeneralMsg_sensorinfo_sid_var, GeneralMsg_sensorinfo_dataTypes_var, GeneralMsg_sensorinfo_temperature_var, GeneralMsg_sensorinfo_humidity_var, GeneralMsg_sensorinfo_timeStamp_var);
}}

private void sendDeviceinfo_via_human_output(short GeneralMsg_deviceinfo_did_var, String GeneralMsg_deviceinfo_name_var, String GeneralMsg_deviceinfo_model_var, String GeneralMsg_deviceinfo_proto_var, String GeneralMsg_deviceinfo_ttype_var, short GeneralMsg_deviceinfo_meth_var, String GeneralMsg_deviceinfo_lastCmd_var, int GeneralMsg_deviceinfo_lastValue_var){
//ThingML send
human_output_port.send(deviceinfoType.instantiate(GeneralMsg_deviceinfo_did_var, GeneralMsg_deviceinfo_name_var, GeneralMsg_deviceinfo_model_var, GeneralMsg_deviceinfo_proto_var, GeneralMsg_deviceinfo_ttype_var, GeneralMsg_deviceinfo_meth_var, GeneralMsg_deviceinfo_lastCmd_var, GeneralMsg_deviceinfo_lastValue_var));
//send to other clients
for(IPIM_human_outputClient client : human_output_clients){
client.deviceinfo_from_human_output(GeneralMsg_deviceinfo_did_var, GeneralMsg_deviceinfo_name_var, GeneralMsg_deviceinfo_model_var, GeneralMsg_deviceinfo_proto_var, GeneralMsg_deviceinfo_ttype_var, GeneralMsg_deviceinfo_meth_var, GeneralMsg_deviceinfo_lastCmd_var, GeneralMsg_deviceinfo_lastValue_var);
}}

//Attributes
private short[] PIM_thermometers_var;
private String[] PIM_thermotext_var;
private float[] PIM_thermoval_var;
private short PIM_last_thermo_var;
private int PIM_id_s_var;
private float PIM_temp_s_var;
private boolean PIM_found_var;
private short PIM_i_var;
private short[] debug_PIM_thermometers_var;
private String[] debug_PIM_thermotext_var;
private float[] debug_PIM_thermoval_var;
private short debug_PIM_last_thermo_var;
private int debug_PIM_id_s_var;
private float debug_PIM_temp_s_var;
private boolean debug_PIM_found_var;
private short debug_PIM_i_var;
//Ports
private Port get_sensor_port;
private Port request_sensor_port;
private Port request_actuator_port;
private Port human_input_port;
private Port human_output_port;
//Message types
protected final SensorinfoMessageType sensorinfoType = new SensorinfoMessageType();
public SensorinfoMessageType getSensorinfoType(){
return sensorinfoType;
}

protected final DeviceinfoMessageType deviceinfoType = new DeviceinfoMessageType();
public DeviceinfoMessageType getDeviceinfoType(){
return deviceinfoType;
}

protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
public TemperatureMessageType getTemperatureType(){
return temperatureType;
}

protected final Fetch_all_tempsMessageType fetch_all_tempsType = new Fetch_all_tempsMessageType();
public Fetch_all_tempsMessageType getFetch_all_tempsType(){
return fetch_all_tempsType;
}

protected final Fetch_tempMessageType fetch_tempType = new Fetch_tempMessageType();
public Fetch_tempMessageType getFetch_tempType(){
return fetch_tempType;
}

protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
public Add_thermometerMessageType getAdd_thermometerType(){
return add_thermometerType;
}

protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
public SwitchOnMessageType getSwitchOnType(){
return SwitchOnType;
}

protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
public SwitchOffMessageType getSwitchOffType(){
return SwitchOffType;
}

protected final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
public Add_deviceMessageType getAdd_deviceType(){
return add_deviceType;
}

//CEP Streams
//Empty Constructor
public PIM() {
super();
PIM_last_thermo_var = (short) 0;
}

//Constructor (all attributes)
public PIM(String name, final short[] PIM_thermometers_var, final String[] PIM_thermotext_var, final float[] PIM_thermoval_var, final short PIM_last_thermo_var, final int PIM_id_s_var, final float PIM_temp_s_var, final boolean PIM_found_var, final short PIM_i_var) {
super(name);
this.PIM_thermometers_var = PIM_thermometers_var;
this.PIM_thermotext_var = PIM_thermotext_var;
this.PIM_thermoval_var = PIM_thermoval_var;
this.PIM_last_thermo_var = PIM_last_thermo_var;
this.PIM_id_s_var = PIM_id_s_var;
this.PIM_temp_s_var = PIM_temp_s_var;
this.PIM_found_var = PIM_found_var;
this.PIM_i_var = PIM_i_var;
}

//Getters and Setters for non readonly/final attributes
public short[] getPIM_thermometers_var() {
return PIM_thermometers_var;
}

public void setPIM_thermometers_var(short[] PIM_thermometers_var) {
this.PIM_thermometers_var = PIM_thermometers_var;
}

public String[] getPIM_thermotext_var() {
return PIM_thermotext_var;
}

public void setPIM_thermotext_var(String[] PIM_thermotext_var) {
this.PIM_thermotext_var = PIM_thermotext_var;
}

public float[] getPIM_thermoval_var() {
return PIM_thermoval_var;
}

public void setPIM_thermoval_var(float[] PIM_thermoval_var) {
this.PIM_thermoval_var = PIM_thermoval_var;
}

public short getPIM_last_thermo_var() {
return PIM_last_thermo_var;
}

public void setPIM_last_thermo_var(short PIM_last_thermo_var) {
this.PIM_last_thermo_var = PIM_last_thermo_var;
}

public int getPIM_id_s_var() {
return PIM_id_s_var;
}

public void setPIM_id_s_var(int PIM_id_s_var) {
this.PIM_id_s_var = PIM_id_s_var;
}

public float getPIM_temp_s_var() {
return PIM_temp_s_var;
}

public void setPIM_temp_s_var(float PIM_temp_s_var) {
this.PIM_temp_s_var = PIM_temp_s_var;
}

public boolean getPIM_found_var() {
return PIM_found_var;
}

public void setPIM_found_var(boolean PIM_found_var) {
this.PIM_found_var = PIM_found_var;
}

public short getPIM_i_var() {
return PIM_i_var;
}

public void setPIM_i_var(short PIM_i_var) {
this.PIM_i_var = PIM_i_var;
}

//Getters for Ports
public Port getGet_sensor_port() {
return get_sensor_port;
}
public Port getRequest_sensor_port() {
return request_sensor_port;
}
public Port getRequest_actuator_port() {
return request_actuator_port;
}
public Port getHuman_input_port() {
return human_input_port;
}
public Port getHuman_output_port() {
return human_output_port;
}
private CompositeState buildPIM_PIM_behavior(){
final List<AtomicState> states_PIM_PIM_behavior = new ArrayList<AtomicState>();
final AtomicState state_PIM_PIM_behavior_Init = new AtomicState("Init")
;
states_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Init);
final AtomicState state_PIM_PIM_behavior_Running = new AtomicState("Running")
;
states_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Running);
final List<Region> regions_PIM_PIM_behavior = new ArrayList<Region>();
final List<Handler> transitions_PIM_PIM_behavior = new ArrayList<Handler>();
transitions_PIM_PIM_behavior.add(new Transition("809642601",sensorinfoType, get_sensor_port, state_PIM_PIM_behavior_Init, state_PIM_PIM_behavior_Init){
@Override
public void doExecute(final Event e) {
final SensorinfoMessageType.SensorinfoMessage sensorinfo = (SensorinfoMessageType.SensorinfoMessage) e;
sendSensorinfo_via_human_output((String) (sensorinfo.model), (String) (sensorinfo.proto), (short) (sensorinfo.sid), (short) (sensorinfo.dataTypes), (float) (sensorinfo.temperature), (int) (sensorinfo.humidity), (int) (sensorinfo.timeStamp));
}

});
transitions_PIM_PIM_behavior.add(new Transition("115077186",deviceinfoType, get_sensor_port, state_PIM_PIM_behavior_Init, state_PIM_PIM_behavior_Init){
@Override
public void doExecute(final Event e) {
final DeviceinfoMessageType.DeviceinfoMessage deviceinfo = (DeviceinfoMessageType.DeviceinfoMessage) e;
sendDeviceinfo_via_human_output((short) (deviceinfo.did), (String) (deviceinfo.name), (String) (deviceinfo.model), (String) (deviceinfo.proto), (String) (deviceinfo.ttype), (short) (deviceinfo.meth), (String) (deviceinfo.lastCmd), (int) (deviceinfo.lastValue));
}

});
transitions_PIM_PIM_behavior.add(new Transition("1935404455",add_thermometerType, human_input_port, state_PIM_PIM_behavior_Init, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
sendAdd_thermometer_via_request_sensor((short) (add_thermometer.id), (String) (add_thermometer.txt));
PIM_thermometers_var[getPIM_last_thermo_var()] = (short) (add_thermometer.id);
PIM_thermotext_var[getPIM_last_thermo_var()] = (String) (add_thermometer.txt);
PIM_thermoval_var[getPIM_last_thermo_var()] = (float) (66.66);
PIM_last_thermo_var = (short) (getPIM_last_thermo_var() + 1);
}

});
transitions_PIM_PIM_behavior.add(new Transition("1029947087",temperatureType, get_sensor_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_id_s_var = (int) (temperature.id);
PIM_i_var = (short) (0);
PIM_found_var = (boolean) (false);
while(getPIM_i_var() < getPIM_last_thermo_var() && ( !(getPIM_found_var()))) {
if(getPIM_id_s_var() == PIM_thermometers_var[getPIM_i_var()]
) {
PIM_found_var = (boolean) (true);

}
PIM_i_var = (short) (getPIM_i_var() + 1);

}
if(getPIM_found_var()) {
PIM_thermoval_var[getPIM_i_var() - 1] = (float) (temperature.t);

}
}

});
transitions_PIM_PIM_behavior.add(new Transition("53512330",add_thermometerType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
sendAdd_thermometer_via_request_sensor((short) (add_thermometer.id), (String) (add_thermometer.txt));
PIM_thermometers_var[getPIM_last_thermo_var()] = (short) (add_thermometer.id);
PIM_thermotext_var[getPIM_last_thermo_var()] = (String) (add_thermometer.txt);
PIM_thermoval_var[getPIM_last_thermo_var()] = (float) (66.66);
PIM_last_thermo_var = (short) (getPIM_last_thermo_var() + 1);
}

});
transitions_PIM_PIM_behavior.add(new Transition("1988152146",fetch_tempType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final Fetch_tempMessageType.Fetch_tempMessage fetch_temp = (Fetch_tempMessageType.Fetch_tempMessage) e;
PIM_id_s_var = (int) (fetch_temp.id);
PIM_i_var = (short) (0);
PIM_found_var = (boolean) (false);
while(getPIM_i_var() < getPIM_last_thermo_var() && ( !(getPIM_found_var()))) {
if(getPIM_id_s_var() == PIM_thermometers_var[getPIM_i_var()]
) {
PIM_found_var = (boolean) (true);

}
PIM_i_var = (short) (getPIM_i_var() + 1);

}
if(getPIM_found_var()) {
sendTemperature_via_human_output((short) (PIM_thermometers_var[getPIM_i_var() - 1]
), (String) (PIM_thermotext_var[getPIM_i_var() - 1]
), (float) (PIM_thermoval_var[getPIM_i_var() - 1]
));

}
}

});
transitions_PIM_PIM_behavior.add(new Transition("1506403257",fetch_all_tempsType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
PIM_i_var = (short) (0);
while(getPIM_i_var() < getPIM_last_thermo_var()) {
PIM_i_var = (short) (getPIM_i_var() + 1);
sendTemperature_via_human_output((short) (PIM_thermometers_var[getPIM_i_var() - 1]
), (String) (PIM_thermotext_var[getPIM_i_var() - 1]
), (float) (PIM_thermoval_var[getPIM_i_var() - 1]
));

}
}

});
transitions_PIM_PIM_behavior.add(new Transition("1081599606",add_deviceType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final Add_deviceMessageType.Add_deviceMessage add_device = (Add_deviceMessageType.Add_deviceMessage) e;
sendAdd_device_via_request_actuator((short) (add_device.did));
}

});
transitions_PIM_PIM_behavior.add(new Transition("1257090175",SwitchOnType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((short) (SwitchOn.did));
}

});
transitions_PIM_PIM_behavior.add(new Transition("1177239495",SwitchOffType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((short) (SwitchOff.did));
}

});
final CompositeState state_PIM_PIM_behavior = new CompositeState("PIM_behavior", states_PIM_PIM_behavior, state_PIM_PIM_behavior_Init, transitions_PIM_PIM_behavior, regions_PIM_PIM_behavior, false);
return state_PIM_PIM_behavior;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
get_sensor_port = new Port(PortType.PROVIDED, "get_sensor", this);
request_sensor_port = new Port(PortType.REQUIRED, "request_sensor", this);
request_actuator_port = new Port(PortType.REQUIRED, "request_actuator", this);
human_input_port = new Port(PortType.PROVIDED, "human_input", this);
human_output_port = new Port(PortType.REQUIRED, "human_output", this);
} else {
get_sensor_port = ((PIM)root).get_sensor_port;
request_sensor_port = ((PIM)root).request_sensor_port;
request_actuator_port = ((PIM)root).request_actuator_port;
human_input_port = ((PIM)root).human_input_port;
human_output_port = ((PIM)root).human_output_port;
}
createCepStreams();if (session == null){
//Init state machine
behavior = buildPIM_PIM_behavior();
}
return this;
}

}

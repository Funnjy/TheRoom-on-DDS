/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : Human
 **/
public class Human extends Component implements IHuman_get_values {

private List<AttributeListener> attListener = new ArrayList<AttributeListener>();
public void addAttributeListener(AttributeListener listener){
this.attListener.add(listener);
}

public void removeAttributeListener(AttributeListener listener){
this.attListener.remove(listener);
}

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
@Override
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

private Collection<IHuman_send_cmdClient> send_cmd_clients = Collections.synchronizedCollection(new LinkedList<IHuman_send_cmdClient>());
public synchronized void registerOnSend_cmd(IHuman_send_cmdClient client){
send_cmd_clients.add(client);
}

public synchronized void unregisterFromSend_cmd(IHuman_send_cmdClient client){
send_cmd_clients.remove(client);
}

@Override
public synchronized void temperature_via_get_values(short TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, float TemperatureMsg_temperature_t_var){
receive(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var), get_values_port);
}

@Override
public synchronized void sensorinfo_via_get_values(String GeneralMsg_sensorinfo_model_var, String GeneralMsg_sensorinfo_proto_var, short GeneralMsg_sensorinfo_sid_var, short GeneralMsg_sensorinfo_dataTypes_var, float GeneralMsg_sensorinfo_temperature_var, int GeneralMsg_sensorinfo_humidity_var, int GeneralMsg_sensorinfo_timeStamp_var){
receive(sensorinfoType.instantiate(GeneralMsg_sensorinfo_model_var, GeneralMsg_sensorinfo_proto_var, GeneralMsg_sensorinfo_sid_var, GeneralMsg_sensorinfo_dataTypes_var, GeneralMsg_sensorinfo_temperature_var, GeneralMsg_sensorinfo_humidity_var, GeneralMsg_sensorinfo_timeStamp_var), get_values_port);
}

@Override
public synchronized void deviceinfo_via_get_values(short GeneralMsg_deviceinfo_did_var, String GeneralMsg_deviceinfo_name_var, String GeneralMsg_deviceinfo_model_var, String GeneralMsg_deviceinfo_proto_var, String GeneralMsg_deviceinfo_ttype_var, short GeneralMsg_deviceinfo_meth_var, String GeneralMsg_deviceinfo_lastCmd_var, int GeneralMsg_deviceinfo_lastValue_var){
receive(deviceinfoType.instantiate(GeneralMsg_deviceinfo_did_var, GeneralMsg_deviceinfo_name_var, GeneralMsg_deviceinfo_model_var, GeneralMsg_deviceinfo_proto_var, GeneralMsg_deviceinfo_ttype_var, GeneralMsg_deviceinfo_meth_var, GeneralMsg_deviceinfo_lastCmd_var, GeneralMsg_deviceinfo_lastValue_var), get_values_port);
}

private void sendAdd_thermometer_via_send_cmd(short TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
//ThingML send
send_cmd_port.send(add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var));
//send to other clients
for(IHuman_send_cmdClient client : send_cmd_clients){
client.add_thermometer_from_send_cmd(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var);
}}

private void sendAdd_device_via_send_cmd(short DeviceGeneral_add_device_did_var){
//ThingML send
send_cmd_port.send(add_deviceType.instantiate(DeviceGeneral_add_device_did_var));
//send to other clients
for(IHuman_send_cmdClient client : send_cmd_clients){
client.add_device_from_send_cmd(DeviceGeneral_add_device_did_var);
}}

private void sendFetch_temp_via_send_cmd(short TemperatureMsg_fetch_temp_id_var){
//ThingML send
send_cmd_port.send(fetch_tempType.instantiate(TemperatureMsg_fetch_temp_id_var));
//send to other clients
for(IHuman_send_cmdClient client : send_cmd_clients){
client.fetch_temp_from_send_cmd(TemperatureMsg_fetch_temp_id_var);
}}

private void sendFetch_all_temps_via_send_cmd(){
//ThingML send
send_cmd_port.send(fetch_all_tempsType.instantiate());
//send to other clients
for(IHuman_send_cmdClient client : send_cmd_clients){
client.fetch_all_temps_from_send_cmd();
}}

private void sendSwitchOn_via_send_cmd(short OnOffMsg_SwitchOn_did_var){
//ThingML send
send_cmd_port.send(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var));
//send to other clients
for(IHuman_send_cmdClient client : send_cmd_clients){
client.SwitchOn_from_send_cmd(OnOffMsg_SwitchOn_did_var);
}}

private void sendSwitchOff_via_send_cmd(short OnOffMsg_SwitchOff_did_var){
//ThingML send
send_cmd_port.send(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var));
//send to other clients
for(IHuman_send_cmdClient client : send_cmd_clients){
client.SwitchOff_from_send_cmd(OnOffMsg_SwitchOff_did_var);
}}

//Attributes
//Ports
private Port send_cmd_port;
private Port get_values_port;
//Message types
protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
public TemperatureMessageType getTemperatureType(){
return temperatureType;
}

protected final Fetch_all_tempsMessageType fetch_all_tempsType = new Fetch_all_tempsMessageType();
public Fetch_all_tempsMessageType getFetch_all_tempsType(){
return fetch_all_tempsType;
}

protected final Fetch_tempMessageType fetch_tempType = new Fetch_tempMessageType();
public Fetch_tempMessageType getFetch_tempType(){
return fetch_tempType;
}

protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
public Add_thermometerMessageType getAdd_thermometerType(){
return add_thermometerType;
}

protected final SensorinfoMessageType sensorinfoType = new SensorinfoMessageType();
public SensorinfoMessageType getSensorinfoType(){
return sensorinfoType;
}

protected final DeviceinfoMessageType deviceinfoType = new DeviceinfoMessageType();
public DeviceinfoMessageType getDeviceinfoType(){
return deviceinfoType;
}

protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
public SwitchOnMessageType getSwitchOnType(){
return SwitchOnType;
}

protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
public SwitchOffMessageType getSwitchOffType(){
return SwitchOffType;
}

protected final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
public Add_deviceMessageType getAdd_deviceType(){
return add_deviceType;
}

//CEP Streams
//Empty Constructor
public Human() {
super();
}

//Constructor (all attributes)
public Human(String name) {
super(name);
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getSend_cmd_port() {
return send_cmd_port;
}
public Port getGet_values_port() {
return get_values_port;
}
public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
send_cmd_port = new Port(PortType.REQUIRED, "send_cmd", this);
get_values_port = new Port(PortType.PROVIDED, "get_values", this);
} else {
send_cmd_port = ((Human)root).send_cmd_port;
get_values_port = ((Human)root).get_values_port;
}
createCepStreams();if (session == null){
//Init state machine
}
return this;
}

}
